// Additional Imports
import org.apache.spark.sql.types.ArrayType
import org.apache.spark.sql.types.{StringType, StructField, StructType}
import org.apache.spark.sql.Row
import spark.implicits._

import org.apache.spark.sql.Row
import org.apache.spark.sql.types._

// schema
val arrayStructureSchema = new StructType()
  .add("name", new StructType()
    .add("firstname", StringType)
    .add("middlename", StringType)
    .add("lastname", StringType))
  .add("languages", ArrayType(StringType))
  .add("state", StringType)
  .add("gender", StringType)

// sample data
  val arrayStructureData = Seq(
    Row(Row("James","","Smith"),List("Java","Scala","C++"),"OH","M"),
    Row(Row("Anna","Rose",""),List("Spark","Java","C++"),"NY","F"),
    Row(Row("Julia","","Williams"),List("CSharp","VB"),"OH","F"),
    Row(Row("Maria","Anne","Jones"),List("CSharp","VB"),"NY","M"),
    Row(Row("Jen","Mary","Brown"),List("CSharp","VB"),"NY","M"),
    Row(Row("Mike","Mary","Williams"),List("Python","VB"),"OH","M")
  )

// create DF
val rdd = spark.sparkContext.parallelize(arrayStructureData)
val df = spark.createDataFrame(rdd, arrayStructureSchema)

df.printSchema()
df.show(false)


  // Condition
  df.where(df("state") === "OH")
    .show(false)

  // SQL Expression
  df.where("gender == 'M'")
    .show(false)

  // Multiple condition
  df.where(df("state") === "OH" && df("gender") === "M")
    .show(false)

  // Array condition
  df.where(array_contains(df("languages"),"Java"))
    .show(false)

  // Struct condition
  df.where(df("name.lastname") === "Williams")
    .show(false)

}
